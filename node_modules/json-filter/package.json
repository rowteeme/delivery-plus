{
  "name": "json-filter",
  "version": "0.0.2",
  "description": "Match an object against a filter",
  "main": "index.js",
  "scripts": {
    "test": "tap test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mmckegg/json-filter"
  },
  "keywords": [
    "json",
    "filter",
    "query",
    "validation"
  ],
  "devDependencies": {
    "tap": "~0.4.0"
  },
  "author": {
    "name": "Matt McKegg"
  },
  "license": "MIT",
  "readme": "JSON Filter\n===\n\nMatch JSON objects against filters - used internally by [JSON Context](https://github.com/mmckegg/json-context), [Realtime Templates](https://github.com/mmckegg/realtime-templates) and [ContextDB](https://github.com/mmckegg/contextdb).\n\n## Installation\n\n```shell\n$ npm install json-filter\n```\n\n## Filters\n\nFilters are just object that have the keys and values you want your final object to have. e.g. if you wanted to require that the field `type` was always `person` your filter would be `{type: 'person'}`. \n\nIf things aren't so black and white, the following conditionals are available:\n\n#### $present\n\nSpecify that the value must not be null or false (i.e. 'truthy'). \n\n```js\n{\n  name: {$present: true}\n}\n```\n\n#### $any\n\nSpecify that the value can be anything. Useful when matching all keys.\n\n```js\n{\n  description: {$any: true}\n}\n```\n\n#### $contains\n\nFor matching against an array. The array must contain all of the values specified.\n\n```js\n{\n  tags: {$contains: ['cat', 'animal']}\n}\n```\n\n#### $excludes\n\nFor matching against an array. The array cannot contain any of the values specified.\n\n```js\n{\n  permissions: {$excludes: ['admin', 'mod']}\n}\n```\n\n#### $only\n\nThe value can only be one of the ones specified.\n\n```js\n{\n  gender: {$only: ['male', 'female', 'unknown']}\n}\n```\n\n#### $not\n\nThe value can be anything except one of the ones specified.\n\n```js\n{\n  browser: {$not: ['IE', 'Fifefox']}\n}\n```\n\n#### $matchAny\n\nAllows a filter to branch into multiple filters when at least one must match.\n\n```js\n{\n  $matchAny: [\n    { type: \"Post\"\n      state: {$only: ['draft', 'published']}\n    },\n    { type: \"Comment\"\n      state: {$only: ['pending', 'approved', 'spam']}\n    }\n  ]\n}\n```\n\n#### $query\n\nSpecify a query to get the value to match. Uses `options.queryHandler`.\n\n```js\n{\n  type: 'item',\n  user_id: {$query: 'user.id'}\n}\n```\n\n#### $optional\n\nA shortcut for specifying a lot of $any filters at the same time.\n\n```js\n{\n  $optional: ['description', 'color', 'age']\n}\n```\n\nIs equivelent to:\n\n```js\n{\n  description: {$any: true},\n  color: {$any: true},\n  age: {$any: true}\n}\n```\n\n## API\n\n```js\nvar checkFilter = require('json-filter')\n```\n\n### checkFilter(source, filter, options)\n\n#### options:\n\n- **match**: specify: 'filter', 'source', 'any', 'all'\n  - filter: every filter permission must be satisfied (i.e. required fields)\n  - source: every source key must be specified in filter\n  - any: the keys don't matter, but if there is a match, they must pass\n  - all: all keys must be exactly the same, otherwise fails - for finding changed items - no $conditionals work in this mode\n- **queryHandler**: Accepts a function(query, localContext) that returns resulting value\n- **context**: Object to pass to the query handler",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mmckegg/json-filter/issues"
  },
  "homepage": "https://github.com/mmckegg/json-filter",
  "_id": "json-filter@0.0.2",
  "dist": {
    "shasum": "45072c3b1a086e4041944cee4df580877b10b082"
  },
  "_from": "json-filter@*",
  "_resolved": "https://registry.npmjs.org/json-filter/-/json-filter-0.0.2.tgz"
}
